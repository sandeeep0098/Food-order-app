{"ast":null,"code":"import _slicedToArray from\"/Users/sandeepyadav/Desktop/Food-Menu-App/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";import{useContext,useEffect,useState}from'react';import CartIcon from'../Cart/CartIcon';import CartContext from'../../Store/cart-context';import classes from'./HeaderCartButton.module.css';import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";var HeaderCartButton=function HeaderCartButton(props){var _useState=useState(false),_useState2=_slicedToArray(_useState,2),btnIsHighlighted=_useState2[0],setBtnIsHighlighted=_useState2[1];var cartCtx=useContext(CartContext);// whenever the context changes this  useContext will be re-evaluted\nvar items=cartCtx.items;// we are pulling out values  it is this items value that we have use in CartContext for rendering auto completetion \nvar numberOfCartItems=items.reduce(function(curNumber,item){// suppose if a user adds 3 sushi in his cart so cart should still display only one item in it\n// for that we use reduce it is a built in that allows us to tranform an array of data into a single value, into a single number in this case\nreturn curNumber+item.amount;// amount is stored in cartitem.js file\n},0);var btnClasses=\"\".concat(classes.button,\" \").concat(btnIsHighlighted?classes.bump:'');useEffect(function(){if(items.length===0){return;}setBtnIsHighlighted(true);var timer=setTimeout(function(){setBtnIsHighlighted(false);},300);// but we need to clear this time out when  not is use \n// this will not cause any problem in use of app \nreturn function(){clearTimeout(timer);};},[items]);// if we directly write cartCtx as a dependecies then everytime there any change in cartxCtx\n// it will highlight the button and we dont want that\nreturn/*#__PURE__*/_jsxs(\"button\",{className:btnClasses,onClick:props.onClick,children:[/*#__PURE__*/_jsx(\"span\",{className:classes.icon,children:/*#__PURE__*/_jsx(CartIcon,{})}),/*#__PURE__*/_jsx(\"span\",{children:\"Your Cart\"}),/*#__PURE__*/_jsx(\"span\",{className:classes.badge,children:numberOfCartItems})]});};export default HeaderCartButton;","map":{"version":3,"names":["useContext","useEffect","useState","CartIcon","CartContext","classes","jsx","_jsx","jsxs","_jsxs","HeaderCartButton","props","_useState","_useState2","_slicedToArray","btnIsHighlighted","setBtnIsHighlighted","cartCtx","items","numberOfCartItems","reduce","curNumber","item","amount","btnClasses","concat","button","bump","length","timer","setTimeout","clearTimeout","className","onClick","children","icon","badge"],"sources":["/Users/sandeepyadav/Desktop/Food-Menu-App/src/components/Layout/HeaderCartButton.js"],"sourcesContent":["\nimport {useContext, useEffect, useState} from 'react'\n\nimport CartIcon from '../Cart/CartIcon';\nimport CartContext from '../../Store/cart-context';\nimport classes from './HeaderCartButton.module.css';\n\nconst HeaderCartButton = (props) => {\n  const [btnIsHighlighted, setBtnIsHighlighted]= useState(false)\n  const cartCtx =  useContext(CartContext)    // whenever the context changes this  useContext will be re-evaluted\n\n  const {items} = cartCtx  // we are pulling out values  it is this items value that we have use in CartContext for rendering auto completetion \n\n\n  const numberOfCartItems = items.reduce((curNumber, item)=>{   \n    // suppose if a user adds 3 sushi in his cart so cart should still display only one item in it\n    // for that we use reduce it is a built in that allows us to tranform an array of data into a single value, into a single number in this case\n    return curNumber + item.amount;    // amount is stored in cartitem.js file\n  },0);\n\n\n  const btnClasses =`${classes.button} ${btnIsHighlighted ? classes.bump : ''}`\n\n  useEffect(()=>{\n    if(items.length === 0){\n      return\n    }\n    setBtnIsHighlighted(true)\n\n     const timer =setTimeout(()=>{\n      setBtnIsHighlighted(false)\n\n    },300)\n    // but we need to clear this time out when  not is use \n    // this will not cause any problem in use of app \n    return ()=>{\n      clearTimeout(timer);\n    }\n\n  },[items]);   // if we directly write cartCtx as a dependecies then everytime there any change in cartxCtx\n  // it will highlight the button and we dont want that\n\n  return (\n    <button className={btnClasses} onClick={props.onClick}>\n      <span className={classes.icon}>\n        <CartIcon />\n      </span>\n      <span>Your Cart</span>\n      <span className={classes.badge}>{numberOfCartItems}</span>\n    </button>\n  );\n};\n\nexport default HeaderCartButton;"],"mappings":"+HACA,OAAQA,UAAU,CAAEC,SAAS,CAAEC,QAAQ,KAAO,OAAO,CAErD,MAAO,CAAAC,QAAQ,KAAM,kBAAkB,CACvC,MAAO,CAAAC,WAAW,KAAM,0BAA0B,CAClD,MAAO,CAAAC,OAAO,KAAM,+BAA+B,CAAC,OAAAC,GAAA,IAAAC,IAAA,gCAAAC,IAAA,IAAAC,KAAA,yBAEpD,GAAM,CAAAC,gBAAgB,CAAG,QAAnB,CAAAA,gBAAgBA,CAAIC,KAAK,CAAK,CAClC,IAAAC,SAAA,CAA+CV,QAAQ,CAAC,KAAK,CAAC,CAAAW,UAAA,CAAAC,cAAA,CAAAF,SAAA,IAAvDG,gBAAgB,CAAAF,UAAA,IAAEG,mBAAmB,CAAAH,UAAA,IAC5C,GAAM,CAAAI,OAAO,CAAIjB,UAAU,CAACI,WAAW,CAAC,CAAI;AAE5C,GAAO,CAAAc,KAAK,CAAID,OAAO,CAAhBC,KAAK,CAAa;AAGzB,GAAM,CAAAC,iBAAiB,CAAGD,KAAK,CAACE,MAAM,CAAC,SAACC,SAAS,CAAEC,IAAI,CAAG,CACxD;AACA;AACA,MAAO,CAAAD,SAAS,CAAGC,IAAI,CAACC,MAAM,CAAK;AACrC,CAAC,CAAC,CAAC,CAAC,CAGJ,GAAM,CAAAC,UAAU,IAAAC,MAAA,CAAKpB,OAAO,CAACqB,MAAM,MAAAD,MAAA,CAAIV,gBAAgB,CAAGV,OAAO,CAACsB,IAAI,CAAG,EAAE,CAAE,CAE7E1B,SAAS,CAAC,UAAI,CACZ,GAAGiB,KAAK,CAACU,MAAM,GAAK,CAAC,CAAC,CACpB,OACF,CACAZ,mBAAmB,CAAC,IAAI,CAAC,CAExB,GAAM,CAAAa,KAAK,CAAEC,UAAU,CAAC,UAAI,CAC3Bd,mBAAmB,CAAC,KAAK,CAAC,CAE5B,CAAC,CAAC,GAAG,CAAC,CACN;AACA;AACA,MAAO,WAAI,CACTe,YAAY,CAACF,KAAK,CAAC,CACrB,CAAC,CAEH,CAAC,CAAC,CAACX,KAAK,CAAC,CAAC,CAAI;AACd;AAEA,mBACET,KAAA,WAAQuB,SAAS,CAAER,UAAW,CAACS,OAAO,CAAEtB,KAAK,CAACsB,OAAQ,CAAAC,QAAA,eACpD3B,IAAA,SAAMyB,SAAS,CAAE3B,OAAO,CAAC8B,IAAK,CAAAD,QAAA,cAC5B3B,IAAA,CAACJ,QAAQ,GAAE,CAAC,CACR,CAAC,cACPI,IAAA,SAAA2B,QAAA,CAAM,WAAS,CAAM,CAAC,cACtB3B,IAAA,SAAMyB,SAAS,CAAE3B,OAAO,CAAC+B,KAAM,CAAAF,QAAA,CAAEf,iBAAiB,CAAO,CAAC,EACpD,CAAC,CAEb,CAAC,CAED,cAAe,CAAAT,gBAAgB"},"metadata":{},"sourceType":"module","externalDependencies":[]}