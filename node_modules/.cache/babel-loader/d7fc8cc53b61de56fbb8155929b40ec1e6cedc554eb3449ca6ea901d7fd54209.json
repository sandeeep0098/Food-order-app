{"ast":null,"code":"var _jsxFileName = \"/Users/sandeepyadav/Desktop/Food-Menu-App/src/Store/CartProvider.js\",\n  _s = $RefreshSig$();\n// WE WILL LEARN THE USE OF USEREDUCER\nimport { useReducer } from \"react\";\nimport CartContext from \"./cart-context\";\n\n// STEP 3- \nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst defaultCartState = {\n  items: [],\n  totalAmount: 0\n};\n// STEP-1 we add cart reducer outside as this will not need anything from the component \nconst cartReducer = (state, action) => {\n  // STEP-2 in reducer functions we recive a state and action object the action is despatched by you \n  // and state is simply the last state managed by the reducer function \n\n  // STEP 8 here we are adding logic to our additemtocarthandler function \n  if (action.type === \"ADD\") {\n    // now we have to mange the itmes added to per meals basis and also update the total price\n    const updatedItems = state.items.concat(action.item);\n    // concat is a built in method in javascript which adds an new item to an array \n    // but unlike push it does not edit he existing array but return a new array\n    const updatedTotalAmount = state.totalAmount + action.item.price * action.item.amount;\n    return {\n      items: updatedItems,\n      totalAmount: updatedTotalAmount\n    };\n  }\n  return defaultCartState; // step 4\n};\n\nconst CartProvider = props => {\n  _s();\n  // step 5 , use reducer returns an array with exactly two elements \n  // so we are using array destructung to pull out the values from that array and store them in seperate constants \n  // the first array elements is always your state snapshot \n  // second element is a function that allows you to dispatch the action to the reducer\n  const [cartState, dispatchCartAction] = useReducer(cartReducer, defaultCartState);\n\n  // WHENEVER THE BELOW TWO FUNCTIONS ARE CALLED ITEMS AND ID ARE PASSES RESPECTIVELY \n  const addItemToCartHandler = item => {\n    dispatchCartAction({\n      type: \"ADD\",\n      item: item\n    });\n    //STEP 7 - It's totally upto us what an action is this type and ADD is any arbitary name\n    // the second name item is also upto as but we need to point it as like props we are passing item to this function\n  };\n\n  const removeItemFromCartHandler = id => {\n    dispatchCartAction({\n      type: \"REMOVE\",\n      id: id\n    });\n  };\n  const cartContext = {\n    items: cartState.items,\n    // WE HAVe defined these values in the defaultCartState\n    // totalAmount: cartState.totalAmount,\n    addItem: addItemToCartHandler,\n    // now we have to use this to add items but for this we have to go to mealsitemform section \n    removeItem: removeItemFromCartHandler\n    // STEP-6 INSTEAD OF HARDCODIND WE WILL ACCESS CARTSTATE ITEMS UPAR TOH DEKHO \n    // items: 0,\n    // totalAmount:0,\n    // addItem: addItemToCartHandler,\n    // removeItem: removeItemFromCartHandler,\n  };\n\n  return /*#__PURE__*/_jsxDEV(CartContext.Provider, {\n    value: cartContext,\n    children: props.children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 70,\n    columnNumber: 5\n  }, this);\n};\n_s(CartProvider, \"PxEugEseoIJIbjFwtAJal5z5ClY=\");\n_c = CartProvider;\nexport default CartProvider;\n\n// import CartContext from \"./cart-context\";\n\n// const CartProvider = (props) => {\n//   const addItemToCartHandler = (item) => {};\n//   const removeItemFromCartHandler = (id) => {};\n\n//   const cartContext = {\n//     item: [],\n//     totalAmount: 0,\n//     addItem: addItemToCartHandler,\n//     removeItem: removeItemFromCartHandler,\n//   };\n\n//   return <CartContext.Provider value={cartContext}></CartContext.Provider>;\n// };\n// export default CartProvider;\nvar _c;\n$RefreshReg$(_c, \"CartProvider\");","map":{"version":3,"names":["useReducer","CartContext","jsxDEV","_jsxDEV","defaultCartState","items","totalAmount","cartReducer","state","action","type","updatedItems","concat","item","updatedTotalAmount","price","amount","CartProvider","props","_s","cartState","dispatchCartAction","addItemToCartHandler","removeItemFromCartHandler","id","cartContext","addItem","removeItem","Provider","value","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/sandeepyadav/Desktop/Food-Menu-App/src/Store/CartProvider.js"],"sourcesContent":["// WE WILL LEARN THE USE OF USEREDUCER\nimport { useReducer } from \"react\";\n\nimport CartContext from \"./cart-context\";\n\n// STEP 3- \nconst defaultCartState = {\n  items: [],\n  totalAmount: 0,\n};\n// STEP-1 we add cart reducer outside as this will not need anything from the component \nconst cartReducer = (state, action) => {\n  // STEP-2 in reducer functions we recive a state and action object the action is despatched by you \n  // and state is simply the last state managed by the reducer function \n\n\n  // STEP 8 here we are adding logic to our additemtocarthandler function \n  if (action.type === \"ADD\") {\n\n    // now we have to mange the itmes added to per meals basis and also update the total price\n    const updatedItems = state.items.concat(action.item);\n    // concat is a built in method in javascript which adds an new item to an array \n    // but unlike push it does not edit he existing array but return a new array\n    const updatedTotalAmount =\n      state.totalAmount + action.item.price * action.item.amount;\n    return {\n      items: updatedItems,\n      totalAmount: updatedTotalAmount,\n    };\n  }\n  return defaultCartState;  // step 4\n};\n\nconst CartProvider = (props) => {\n\n  // step 5 , use reducer returns an array with exactly two elements \n  // so we are using array destructung to pull out the values from that array and store them in seperate constants \n  // the first array elements is always your state snapshot \n  // second element is a function that allows you to dispatch the action to the reducer\n  const [cartState, dispatchCartAction] = useReducer(\n    cartReducer,\n    defaultCartState\n  );\n\n  // WHENEVER THE BELOW TWO FUNCTIONS ARE CALLED ITEMS AND ID ARE PASSES RESPECTIVELY \n  const addItemToCartHandler = (item) => {\n    dispatchCartAction({ type: \"ADD\", item: item });\n    //STEP 7 - It's totally upto us what an action is this type and ADD is any arbitary name\n    // the second name item is also upto as but we need to point it as like props we are passing item to this function\n  };\n\n  const removeItemFromCartHandler = (id) => {\n    dispatchCartAction({ type: \"REMOVE\", id: id });\n  };\n\n  const cartContext = {\n\n     items: cartState.items,       // WE HAVe defined these values in the defaultCartState\n    // totalAmount: cartState.totalAmount,\n    addItem: addItemToCartHandler,     // now we have to use this to add items but for this we have to go to mealsitemform section \n    removeItem: removeItemFromCartHandler,\n    // STEP-6 INSTEAD OF HARDCODIND WE WILL ACCESS CARTSTATE ITEMS UPAR TOH DEKHO \n    // items: 0,\n    // totalAmount:0,\n    // addItem: addItemToCartHandler,\n    // removeItem: removeItemFromCartHandler,\n  };\n\n  return (\n    <CartContext.Provider value={cartContext}>\n      {props.children}\n    </CartContext.Provider>\n  );\n};\n\nexport default CartProvider;\n\n\n\n\n\n\n\n\n\n// import CartContext from \"./cart-context\";\n\n// const CartProvider = (props) => {\n//   const addItemToCartHandler = (item) => {};\n//   const removeItemFromCartHandler = (id) => {};\n\n//   const cartContext = {\n//     item: [],\n//     totalAmount: 0,\n//     addItem: addItemToCartHandler,\n//     removeItem: removeItemFromCartHandler,\n//   };\n\n//   return <CartContext.Provider value={cartContext}></CartContext.Provider>;\n// };\n// export default CartProvider;\n\n"],"mappings":";;AAAA;AACA,SAASA,UAAU,QAAQ,OAAO;AAElC,OAAOC,WAAW,MAAM,gBAAgB;;AAExC;AAAA,SAAAC,MAAA,IAAAC,OAAA;AACA,MAAMC,gBAAgB,GAAG;EACvBC,KAAK,EAAE,EAAE;EACTC,WAAW,EAAE;AACf,CAAC;AACD;AACA,MAAMC,WAAW,GAAGA,CAACC,KAAK,EAAEC,MAAM,KAAK;EACrC;EACA;;EAGA;EACA,IAAIA,MAAM,CAACC,IAAI,KAAK,KAAK,EAAE;IAEzB;IACA,MAAMC,YAAY,GAAGH,KAAK,CAACH,KAAK,CAACO,MAAM,CAACH,MAAM,CAACI,IAAI,CAAC;IACpD;IACA;IACA,MAAMC,kBAAkB,GACtBN,KAAK,CAACF,WAAW,GAAGG,MAAM,CAACI,IAAI,CAACE,KAAK,GAAGN,MAAM,CAACI,IAAI,CAACG,MAAM;IAC5D,OAAO;MACLX,KAAK,EAAEM,YAAY;MACnBL,WAAW,EAAEQ;IACf,CAAC;EACH;EACA,OAAOV,gBAAgB,CAAC,CAAE;AAC5B,CAAC;;AAED,MAAMa,YAAY,GAAIC,KAAK,IAAK;EAAAC,EAAA;EAE9B;EACA;EACA;EACA;EACA,MAAM,CAACC,SAAS,EAAEC,kBAAkB,CAAC,GAAGrB,UAAU,CAChDO,WAAW,EACXH,gBACF,CAAC;;EAED;EACA,MAAMkB,oBAAoB,GAAIT,IAAI,IAAK;IACrCQ,kBAAkB,CAAC;MAAEX,IAAI,EAAE,KAAK;MAAEG,IAAI,EAAEA;IAAK,CAAC,CAAC;IAC/C;IACA;EACF,CAAC;;EAED,MAAMU,yBAAyB,GAAIC,EAAE,IAAK;IACxCH,kBAAkB,CAAC;MAAEX,IAAI,EAAE,QAAQ;MAAEc,EAAE,EAAEA;IAAG,CAAC,CAAC;EAChD,CAAC;EAED,MAAMC,WAAW,GAAG;IAEjBpB,KAAK,EAAEe,SAAS,CAACf,KAAK;IAAQ;IAC/B;IACAqB,OAAO,EAAEJ,oBAAoB;IAAM;IACnCK,UAAU,EAAEJ;IACZ;IACA;IACA;IACA;IACA;EACF,CAAC;;EAED,oBACEpB,OAAA,CAACF,WAAW,CAAC2B,QAAQ;IAACC,KAAK,EAAEJ,WAAY;IAAAK,QAAA,EACtCZ,KAAK,CAACY;EAAQ;IAAAC,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACK,CAAC;AAE3B,CAAC;AAACf,EAAA,CAxCIF,YAAY;AAAAkB,EAAA,GAAZlB,YAAY;AA0ClB,eAAeA,YAAY;;AAU3B;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AAAA,IAAAkB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}