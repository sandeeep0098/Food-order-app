{"ast":null,"code":"import _slicedToArray from\"/Users/sandeepyadav/Desktop/Food-Menu-App/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";import _toConsumableArray from\"/Users/sandeepyadav/Desktop/Food-Menu-App/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";import _objectSpread from\"/Users/sandeepyadav/Desktop/Food-Menu-App/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";// WE WILL LEARN THE USE OF USEREDUCER\nimport{useReducer}from\"react\";import CartContext from\"./cart-context\";// STEP 3-\nimport{jsx as _jsx}from\"react/jsx-runtime\";var defaultCartState={items:[],totalAmount:0};// STEP-1 we add cart reducer outside as this will not need anything from the component\nvar cartReducer=function cartReducer(state,action){// STEP-2 in reducer functions we recive a state and action object the action is despatched by you\n// and state is simply the last state managed by the reducer function\n// STEP 8 here we are adding logic to our additemtocarthandler function\nif(action.type===\"ADD\"){var updatedTotalAmount=state.totalAmount+action.item.price*action.item.amount;var existingCartItemIndex=state.items.findIndex(function(item){return item.id===action.item.id;});var existingCartItem=state.items[existingCartItemIndex];var updatedItems;if(existingCartItem){var updatedItem=_objectSpread(_objectSpread({},existingCartItem),{},{amount:existingCartItem.amount+action.item.amount});updatedItems=_toConsumableArray(state.items);updatedItems[existingCartItemIndex]=updatedItem;}else{updatedItems=state.items.concat(action.item);}// now we have to mange the itmes added to per meals basis and also update the total price\n// const updatedItems = state.items.concat(action.item);\n// concat is a built in method in javascript which adds an new item to an array\n// but unlike push it does not edit he existing array but return a new array\nreturn{items:updatedItems,totalAmount:updatedTotalAmount};}if(action.type===\"REMOVE\"){var _existingCartItemIndex=state.items.findIndex(function(item){return item.id===action.id;});var existingItem=state.items[_existingCartItemIndex];var _updatedTotalAmount=state.totalAmount-existingItem.price;var _updatedItems;if(existingItem.amount===1){// amount ===1 means it is the last item of that type in the cart\n_updatedItems=state.items.filter(function(item){return item.id!==action.id;});}else{var _updatedItem=_objectSpread(_objectSpread({},existingItem),{},{amount:existingItem.amount-1});_updatedItems=_toConsumableArray(state.items);_updatedItems[_existingCartItemIndex]=_updatedItem;}return{items:_updatedItems,totalAmount:_updatedTotalAmount// go to cart to use this id \n};}if(action.type===\"CLEAR\"){return defaultCartState;}return defaultCartState;// step 4\n};var CartProvider=function CartProvider(props){// step 5 , use reducer returns an array with exactly two elements\n// so we are using array destructung to pull out the values from that array and store them in seperate constants\n// the first array elements is always your state snapshot\n// second element is a function that allows you to dispatch the action to the reducer\nvar _useReducer=useReducer(cartReducer,defaultCartState),_useReducer2=_slicedToArray(_useReducer,2),cartState=_useReducer2[0],dispatchCartAction=_useReducer2[1];// WHENEVER THE BELOW TWO FUNCTIONS ARE CALLED ITEMS AND ID ARE PASSES RESPECTIVELY\nvar addItemToCartHandler=function addItemToCartHandler(item){dispatchCartAction({type:\"ADD\",item:item});//STEP 7 - It's totally upto us what an action is this type and ADD is any arbitary name\n// the second name item is also upto as but we need to point it as like props we are passing item to this function\n};var removeItemFromCartHandler=function removeItemFromCartHandler(id){dispatchCartAction({type:\"REMOVE\",id:id});};var clearCartHandler=function clearCartHandler(){dispatchCartAction({type:'CLEAR'});};var cartContext={items:cartState.items,// WE HAVe defined these values in the defaultCartState\ntotalAmount:cartState.totalAmount,addItem:addItemToCartHandler,// now we have to use this to add items but for this we have to go to mealsitemform section\nremoveItem:removeItemFromCartHandler,clearCart:clearCartHandler// STEP-6 INSTEAD OF HARDCODIND WE WILL ACCESS CARTSTATE ITEMS UPAR TOH DEKHO\n// items: 0,\n// totalAmount:0,\n// addItem: addItemToCartHandler,\n// removeItem: removeItemFromCartHandler,\n};return/*#__PURE__*/_jsx(CartContext.Provider,{value:cartContext,children:props.children});};export default CartProvider;// import CartContext from \"./cart-context\";\n// const CartProvider = (props) => {\n//   const addItemToCartHandler = (item) => {};\n//   const removeItemFromCartHandler = (id) => {};\n//   const cartContext = {\n//     item: [],\n//     totalAmount: 0,\n//     addItem: addItemToCartHandler,\n//     removeItem: removeItemFromCartHandler,\n//   };\n//   return <CartContext.Provider value={cartContext}></CartContext.Provider>;\n// };\n// export default CartProvider;","map":{"version":3,"names":["useReducer","CartContext","jsx","_jsx","defaultCartState","items","totalAmount","cartReducer","state","action","type","updatedTotalAmount","item","price","amount","existingCartItemIndex","findIndex","id","existingCartItem","updatedItems","updatedItem","_objectSpread","_toConsumableArray","concat","existingItem","filter","CartProvider","props","_useReducer","_useReducer2","_slicedToArray","cartState","dispatchCartAction","addItemToCartHandler","removeItemFromCartHandler","clearCartHandler","cartContext","addItem","removeItem","clearCart","Provider","value","children"],"sources":["/Users/sandeepyadav/Desktop/Food-Menu-App/src/Store/CartProvider.js"],"sourcesContent":["// WE WILL LEARN THE USE OF USEREDUCER\nimport { useReducer } from \"react\";\n\nimport CartContext from \"./cart-context\";\n\n// STEP 3-\nconst defaultCartState = {\n  items: [],\n  totalAmount: 0,\n};\n// STEP-1 we add cart reducer outside as this will not need anything from the component\nconst cartReducer = (state, action) => {\n  // STEP-2 in reducer functions we recive a state and action object the action is despatched by you\n  // and state is simply the last state managed by the reducer function\n\n  // STEP 8 here we are adding logic to our additemtocarthandler function\n  if (action.type === \"ADD\") {\n    const updatedTotalAmount =\n      state.totalAmount + action.item.price * action.item.amount;\n\n    const existingCartItemIndex = state.items.findIndex(\n      (item) => item.id === action.item.id\n    );\n\n    const existingCartItem = state.items[existingCartItemIndex];\n\n    let updatedItems;\n\n    if (existingCartItem) {\n      const updatedItem = {\n        ...existingCartItem,\n        amount: existingCartItem.amount + action.item.amount,\n      };\n      updatedItems = [...state.items];\n      updatedItems[existingCartItemIndex] = updatedItem;\n    } else {\n      updatedItems = state.items.concat(action.item);\n    }\n\n    // now we have to mange the itmes added to per meals basis and also update the total price\n    // const updatedItems = state.items.concat(action.item);\n    // concat is a built in method in javascript which adds an new item to an array\n    // but unlike push it does not edit he existing array but return a new array\n\n    return {\n      items: updatedItems,\n      totalAmount: updatedTotalAmount,\n    };\n  }\n\n  if (action.type === \"REMOVE\") {\n    const existingCartItemIndex = state.items.findIndex(\n      (item) => item.id === action.id\n    );\n\n    const existingItem = state.items[existingCartItemIndex];\n\n    const updatedTotalAmount = state.totalAmount - existingItem.price;\n\n    let updatedItems;\n    if (existingItem.amount === 1) {\n      // amount ===1 means it is the last item of that type in the cart\n      updatedItems = state.items.filter((item) => item.id !== action.id);\n    } else {\n      const updatedItem = { ...existingItem, amount: existingItem.amount - 1 };\n      updatedItems = [...state.items];\n      updatedItems[existingCartItemIndex] = updatedItem;\n    }\n    return {\n      items: updatedItems,\n      totalAmount: updatedTotalAmount,   // go to cart to use this id \n    };\n  }\n  if(action.type === \"CLEAR\"){\n    return defaultCartState\n  }\n  return defaultCartState; // step 4\n};\n\nconst CartProvider = (props) => {\n  // step 5 , use reducer returns an array with exactly two elements\n  // so we are using array destructung to pull out the values from that array and store them in seperate constants\n  // the first array elements is always your state snapshot\n  // second element is a function that allows you to dispatch the action to the reducer\n  const [cartState, dispatchCartAction] = useReducer(\n    cartReducer,\n    defaultCartState\n  );\n\n  // WHENEVER THE BELOW TWO FUNCTIONS ARE CALLED ITEMS AND ID ARE PASSES RESPECTIVELY\n  const addItemToCartHandler = (item) => {\n    dispatchCartAction({ type: \"ADD\", item: item });\n    //STEP 7 - It's totally upto us what an action is this type and ADD is any arbitary name\n    // the second name item is also upto as but we need to point it as like props we are passing item to this function\n  };\n\n  const removeItemFromCartHandler = (id) => {\n    dispatchCartAction({ type: \"REMOVE\", id: id });\n  };\n\n  const clearCartHandler = () =>{\n    dispatchCartAction({type: 'CLEAR'})\n  }\n\n  const cartContext = {\n    items: cartState.items, // WE HAVe defined these values in the defaultCartState\n    totalAmount: cartState.totalAmount,\n    addItem: addItemToCartHandler, // now we have to use this to add items but for this we have to go to mealsitemform section\n    removeItem: removeItemFromCartHandler,\n    clearCart : clearCartHandler\n    // STEP-6 INSTEAD OF HARDCODIND WE WILL ACCESS CARTSTATE ITEMS UPAR TOH DEKHO\n    // items: 0,\n    // totalAmount:0,\n    // addItem: addItemToCartHandler,\n    // removeItem: removeItemFromCartHandler,\n  };\n\n  return (\n    <CartContext.Provider value={cartContext}>\n      {props.children}\n    </CartContext.Provider>\n  );\n};\n\nexport default CartProvider;\n\n// import CartContext from \"./cart-context\";\n\n// const CartProvider = (props) => {\n//   const addItemToCartHandler = (item) => {};\n//   const removeItemFromCartHandler = (id) => {};\n\n//   const cartContext = {\n//     item: [],\n//     totalAmount: 0,\n//     addItem: addItemToCartHandler,\n//     removeItem: removeItemFromCartHandler,\n//   };\n\n//   return <CartContext.Provider value={cartContext}></CartContext.Provider>;\n// };\n// export default CartProvider;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}